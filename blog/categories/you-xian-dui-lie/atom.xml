<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类:  优先队列 | ZVINK's garden]]></title>
  <link href="http://kevin20x2.github.io/blog/categories/you-xian-dui-lie/atom.xml" rel="self"/>
  <link href="http://kevin20x2.github.io/"/>
  <updated>2018-01-07T19:50:01+08:00</updated>
  <id>http://kevin20x2.github.io/</id>
  <author>
    <name><![CDATA[ZVINK]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[hdu5261]]></title>
    <link href="http://kevin20x2.github.io/blog/2015/06/08/hdu5261/"/>
    <updated>2015-06-08T19:48:25+08:00</updated>
    <id>http://kevin20x2.github.io/blog/2015/06/08/hdu5261</id>
    <content type="html"><![CDATA[<h3><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5261">蜀道难</a></h3>

<!--more-->


<p>百度之星复赛 的题目。
题目大意是有n座山均匀放置在一个圆上，然后每一座山有一个高度，山顶之间的距离定义为 两个山的高度加上山之间路的距离。
要求求出两个山峰之间的最大距离，并且输出字典序最小的编号对。n为100000，简单的n<sup>2</sup> 肯定超时。   <br/>
将山看成点。h[i]表示编号为i的山的高度，我们要求的是 h[i]+h[j]+dist[i,j]的最大距离。 设 j>i.因为在圆上面所以当<br/>
i>=j-n/2 时 dist[i,j] = (j-i)*R <br/>
i<j-n/2 时 dist[i,j] = (n+i-j)*R
可以用优先队列进行优化，对于确定的 j ，我们只需要维护 h[i]+i*R (i<j-n/2)或者 h[i]-i*R (i>=j-n/2)的最大值。<br/>
这样优化过后， 因为每一个元素进入队列一次 ， 效率为O(n).</p>

<pre><code class="cpp">#include&lt;cstdio&gt;
#include&lt;iostream&gt;
#include&lt;cstring&gt;
#include&lt;cmath&gt;
#include&lt;vector&gt;
#include&lt;algorithm&gt;
typedef  long long LL;

#define clr(x) memset((x),0,sizeof(x))
#define inf 0x3f3f3f3f

using namespace std;
const int maxn = 100050;
int s[maxn],s2[maxn];
int l,r;
int l2,r2;
int t,n;
LL R;
LL a[maxn];

int main()
{
    scanf("%d",&amp;t);
    int cas = 0;
    while(t--)
    {
        scanf("%d%lld",&amp;n,&amp;R);
        for(int i = 1;i&lt;=n;i++)
            scanf("%lld",&amp;a[i]);
        l = r = 0;
        l2= r2=0;
        s[r++] = 1;
        pair &lt;int,int &gt; ans = make_pair(inf,inf);
        LL res=0;
        for(int i = 2;i&lt;=n;i++)
        {
            if(res&lt;a[s[l]]+a[i] + (i-s[l])*R)
            {
                res = a[s[l]] +a[i] +(i-s[l])*R;
                ans = make_pair(s[l],i);
            }
            else if(s[l]&lt;ans.first&amp;&amp;res == a[s[l]]+a[i]+(i-s[l])*R)
            {
                ans = make_pair(s[l],i);
            }
            while(l&lt;r&amp;&amp;a[i]-i*R &gt;a[s[r-1]]-s[r-1]*R) r--;
            s[r++] = i;
            while(l&lt;r&amp;&amp;s[l]&lt;=i-n/2) l++;
            if(i==n/2+1)
            {
                s2[r2++] = 1;
            }

            if(i&gt;n/2+1)
            {
                if(res&lt;a[s2[l2]]+a[i]+(s2[l2]+n-i)*R)
                {
                    res = a[s2[l2]] +a[i] +(s2[l2]+n-i)*R;
                    ans = make_pair(s2[l2],i);
                }
                else if(s2[l2]&lt;ans.first&amp;&amp;res==a[s2[l2]]+a[i]+(s2[l2]+n-i)*R)
                {
                    ans = make_pair(s2[l2],i);
                }
                while(l2&lt;r2&amp;&amp;a[i-n/2]+(i-n/2)*R&gt;a[s2[r2-1]]+s2[r2-1]*R) r2--;
                s2[r2++] = i-n/2;
            }
        }
        printf("Case #%d:\n",++cas);
        printf("%d %d\n",ans.first,ans.second);
    }
    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[poj3017]]></title>
    <link href="http://kevin20x2.github.io/blog/2015/06/02/poj3017/"/>
    <updated>2015-06-02T22:19:38+08:00</updated>
    <id>http://kevin20x2.github.io/blog/2015/06/02/poj3017</id>
    <content type="html"><![CDATA[<h3><a href="http://poj.org/problem?id=3017">Cut the Sequence</a></h3>

<!--more-->


<p>题意是给你一个序列，找出一个连续的划分，使得每部分和小于M ，然后每一部分贡献出最大的值作为该部分的权值，求权值和的最小值。
数据大小是100000 <br/>
dp方程很容易想到：<br/>
dp[i]  = min(dp[j]+ max[j+1,i]);  j&lt;i; <br/>
然而这个时间复杂度是n<sup>2</sup>的。一般情况是要用一种数据结构来优化，首先容易想到的就是线段树，然而i变化的时候不能保证原来的最大值不变。然后考虑能不能优化状态。
对于现在的状态dp[now] ，
设 i>j ，  则此时i和j对应的转化式子为<br/>
 dp[i]+max[i+1,now] ;<br/>
 dp[j]+max[j+1,now] ;<br/>
由于有dp[i]>=dp[j] （显而易见）具有单调性;<br/>
此时max[i+1,now] &lt;= max[j+1,now];<br/>
当max[i+1,now] == max[j+1,now]时那么此时的状态就是无效状态。<br/>
令j=i-1 得到若 a[i]>a[i-1] ,则max[i+1,now] = max[i,now];<br/>
推广得，若存在 a[i] >=a[j]  j&lt;i那么a[i]为无效状态。<br/>
所以可以用优先队列进行优化 。</p>

<pre><code class="cpp">#include&lt;cstdio&gt;
#include&lt;iostream&gt;
#include&lt;cstring&gt;
#include&lt;cmath&gt;
#include&lt;vector&gt;
#include&lt;algorithm&gt;
typedef  long long LL;

#define clr(x) memset((x),0,sizeof(x))
#define inf 0x3f3f3f3f

using namespace std;
const int maxn  = 100050;
int tree[maxn&lt;&lt;2];
LL a[maxn];
LL dp[maxn];
int q[maxn];
int l,r;
int n;
LL m;

int main()
{
    scanf("%d%I64d",&amp;n,&amp;m);
    LL cnt = 0;
    int k = 0;
    l = r = 0;
    dp[0] = 0;
    for(int i = 1;i&lt;=n;i++)
    {
        scanf("%I64d",&amp;a[i]);
        if(a[i]&gt;m) {
            printf("-1\n");
            return 0;
        }
        cnt+=a[i];
        while(cnt&gt;m) cnt-=a[++k]; 
        while(l&lt;r&amp;&amp;a[i]&gt;=a[q[r-1]]) r--;
        q[r++] = i;
        while(l&lt;r&amp;&amp;q[l]&lt;k) l++;
        dp[i] = 1e12;
        int tt = k;
        for(int j =l;j&lt;r;j++){
    //      printf("%d ",q[j]);
            dp[i] = min(dp[i],dp[tt]+a[q[j]]);
            tt = q[j];
        }
    //  printf("*%d ",dp[i]);
    //  printf("\n");
    }

    printf("%I64d\n",dp[n]);
    return 0;
}
</code></pre>
]]></content>
  </entry>
  
</feed>
