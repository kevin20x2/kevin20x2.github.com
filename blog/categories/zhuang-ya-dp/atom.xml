<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类:  状压dp | ZVINK's garden]]></title>
  <link href="http://kevin20x2.github.io/blog/categories/zhuang-ya-dp/atom.xml" rel="self"/>
  <link href="http://kevin20x2.github.io/"/>
  <updated>2018-01-10T15:50:25+08:00</updated>
  <id>http://kevin20x2.github.io/</id>
  <author>
    <name><![CDATA[ZVINK]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[poj2288]]></title>
    <link href="http://kevin20x2.github.io/blog/2015/05/28/poj2288/"/>
    <updated>2015-05-28T16:19:00+08:00</updated>
    <id>http://kevin20x2.github.io/blog/2015/05/28/poj2288</id>
    <content type="html"><![CDATA[<h3><a href="http://poj.org/problem?id=2288">Islands and Bridges</a></h3>

<!--more-->


<p>题意是在一个无向图中找一条哈密顿路径(每个点通过一遍) 使得权值最大
权值由3部分组成，第一部分是每个点的权值的和，第二部分为这个路径上相邻两点的权值之乘积。第三部分为对于路径上连续3点i,i+1,i+2，若存在
i 和i+2之间的边(形成三角形)则加上3点乘积。然后输出这种最大路径的条数。</p>

<p>点的个数不超过13因此可以用状态压缩。
dp[i][m][j]表示以i为终点，j为前一个节点，m为当前2进制状态的状态的最小值。</p>

<p>这样每向前找一个不在路径上的节点k
有
dp[k][m|(1&lt;&lt;(k-1)][i] = dp[i][m][j] + v[k]<em><em>v[i] + (如果k和j之间有边  )v[i]</em>v[k]</em>[j]</p>

<p>然后结果也需要dp求出来，num[i][m][j]表示得到这个最小结果的有多少条路径那么这个值等于所有满足条件的能够转移到该状态的数目之和。</p>

<pre><code class="cpp">
/*
 *File:  2288.cpp
 *Date : 2015-05-17 20:28:22
 */
#include&lt;cstdio&gt;
#include&lt;iostream&gt;
#include&lt;cstring&gt;
#include&lt;cmath&gt;
#include&lt;vector&gt;
#include&lt;algorithm&gt;
typedef  long long LL;

#define clr(x) memset((x),0,sizeof(x))
#define inf 0x3f3f3f3f

using namespace std;
LL dp[14][1&lt;&lt;14][14];
LL num[14][1&lt;&lt;14][14];
int t;
bool g[14][14];
LL a[14];
int n,m;
int main()
{
    cin&gt;&gt;t;
    while(t--)
    {
        cin&gt;&gt;n&gt;&gt;m;
        LL sum=0;
        a[0] = 0;
        for(int i =1;i&lt;=n;i++)
        {
            cin&gt;&gt;a[i];
            sum+=a[i];
        }
        if(n==1)
        {
            cout&lt;&lt;sum&lt;&lt;" "&lt;&lt;1&lt;&lt;endl;
            continue;
        }
        int x,y;
        memset(g,0,sizeof g);
        memset(dp,-1,sizeof dp);
        memset(num,0,sizeof num);
        for(int i =1;i&lt;=m;i++)
        {
            cin&gt;&gt;x&gt;&gt;y;
            if(x^y)
            g[x][y]= g[y][x] = 1;
        }
        for(int i=0;i&lt;(1&lt;&lt;n);i++)
        {
            for(int j =1;j&lt;=n;j++) if((i&amp;(1&lt;&lt;(j-1)))!=0)
            {
                int ti = (i^(1&lt;&lt;(j-1)));
                for(int tt = 1;tt&lt;=n;tt++) if((ti&amp;(1&lt;&lt;(tt-1)))!=0&amp;&amp;g[j][tt])
                {
                    int t = (ti^(1&lt;&lt;(tt-1)));
                    if(t==0)
                    {
                        dp[j][i][tt] = a[tt]*a[j];
                        num[j][i][tt] = 1;
                       // continue;
                    }
                    for(int k = 1;k&lt;=n;k++) if((t&amp;(1&lt;&lt;(k-1)))!=0&amp;&amp;g[tt][k])
                    {
                        if(dp[tt][ti][k]==-1) continue;
                        LL tmp = dp[tt][ti][k]+a[j]*a[tt];
                        if(g[j][k])
                        {
                            tmp += a[tt]*a[j]*a[k];
                        }
                        if(tmp &gt; dp[j][i][tt])
                        {
                            dp[j][i][tt] = tmp;
                            num[j][i][tt] = num[tt][ti][k];
                        }else if(tmp == dp[j][i][tt]) num[j][i][tt]+= num[tt][ti][k];
                    }
                   // printf("%d %d %d %d %I64d\n",j,i,tt,t,dp[j][i][tt]);
                }
            }
        }
        LL count = 0;
        LL ans = -1 ;
        for(int i =1;i&lt;=n;i++)
        {
            for(int j = 1;j&lt;=n;j++) if(i!=j)
            {
                if(dp[i][(1&lt;&lt;n)-1][j]&gt;ans)
                {
                    ans = dp[i][(1&lt;&lt;n)-1][j];
                    count  = num[i][(1&lt;&lt;n)-1][j];
                }else if(dp[i][(1&lt;&lt;n)-1][j]==ans)
                 count += num[i][(1&lt;&lt;n)-1][j];
            }

        }
        if(ans &gt;=0) 
        cout&lt;&lt;ans+sum&lt;&lt;" "&lt;&lt;count/2&lt;&lt;endl;
        else puts("0 0");

    }
    return 0;
}
</code></pre>
]]></content>
  </entry>
  
</feed>
