<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类:  codeforces | ZVINK's garden]]></title>
  <link href="http://kevin20x2.github.io/blog/categories/codeforces/atom.xml" rel="self"/>
  <link href="http://kevin20x2.github.io/"/>
  <updated>2018-01-06T13:37:21+08:00</updated>
  <id>http://kevin20x2.github.io/</id>
  <author>
    <name><![CDATA[ZVINK]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[codeforces 508E]]></title>
    <link href="http://kevin20x2.github.io/blog/2015/04/04/codeforces-508e/"/>
    <updated>2015-04-04T17:13:00+08:00</updated>
    <id>http://kevin20x2.github.io/blog/2015/04/04/codeforces-508e</id>
    <content type="html"><![CDATA[<h2><a href="http://acm.hust.edu.cn/vjudge/problem/visitOriginUrl.action?id=111976">C - Arthur and Brackets</a></h2>

<!--more-->


<h3>Description</h3>

<p>Notice that the memory limit is non-standard.</p>

<p>Recently Arthur and Sasha have studied correct bracket sequences. Arthur understood this topic perfectly and become so amazed about correct bracket sequences, so he even got himself a favorite correct bracket sequence of length 2n. Unlike Arthur, Sasha understood the topic very badly, and broke Arthur&rsquo;s favorite correct bracket sequence just to spite him.</p>

<p>All Arthur remembers about his favorite sequence is for each opening parenthesis (&lsquo;(&rsquo;) the approximate distance to the corresponding closing one (&lsquo;)&rsquo;). For the i-th opening bracket he remembers the segment [li, ri], containing the distance to the corresponding closing bracket.</p>

<p>Formally speaking, for the i-th opening bracket (in order from left to right) we know that the difference of its position and the position of the corresponding closing bracket belongs to the segment [li, ri].</p>

<p>Help Arthur restore his favorite correct bracket sequence!</p>

<h3>Input</h3>

<p>The first line contains integer n (1 ≤ n ≤ 600), the number of opening brackets in Arthur&rsquo;s favorite correct bracket sequence.</p>

<p>Next n lines contain numbers li and ri (1 ≤ li ≤ ri &lt; 2n), representing the segment where lies the distance from the i-th opening bracket and the corresponding closing one.</p>

<p>The descriptions of the segments are given in the order in which the opening brackets occur in Arthur&rsquo;s favorite sequence if we list them from left to right.</p>

<h3>Output</h3>

<p>If it is possible to restore the correct bracket sequence by the given data, print any possible choice.</p>

<p>If Arthur got something wrong, and there are no sequences corresponding to the given information, print a single line &ldquo;IMPOSSIBLE&rdquo; (without the quotes).</p>

<h2>Sample Input</h2>

<h3>Input</h3>

<p>4<br/>
1 1<br/>
1 1<br/>
1 1<br/>
1 1</p>

<h3>Output</h3>

<p>()()()()</p>

<h3>Input</h3>

<p>3<br/>
5 5<br/>
3 3<br/>
1 1</p>

<h3>Output</h3>

<p>((()))</p>

<h3>Input</h3>

<p>3<br/>
5 5<br/>
3 3<br/>
2 2</p>

<h3>Output</h3>

<p>IMPOSSIBLE</p>

<h3>Input</h3>

<p>3<br/>
2 3<br/>
1 4<br/>
1 4</p>

<h3>Output</h3>

<p>(())()</p>

<p>这种带括号匹配的问题一般都能用到栈,然而我却傻乎乎的用dfs然后wa了很久。</p>

<p>代码借鉴了别人的，我加点注释吧orz。</p>

<pre><code class="cpp">
#include&lt;cstdio&gt;
#include&lt;iostream&gt;
#include&lt;cstring&gt;
#include&lt;cmath&gt;
#include&lt;vector&gt;
#include&lt;algorithm&gt;
typedef  long long LL;

#define clr(x) memset((x),0,sizeof(x))
#define inf 0x3f3f3f3f

using namespace std;
char ans[1250];
int l[650],r[650];
int pos[650];//存放第i个'('的位置
int s[1250];//栈
int top=0;
int n;
bool flag ;


int main()
{
    flag =0;
    int len=0; //表示位置
    scanf("%d",&amp;n);
    for(int i=1;i&lt;=n;i++)
    {
        scanf("%d%d",&amp;l[i],&amp;r[i]);
        if(flag )  continue;
        s[++top] = i;
        pos[i] = len;
        ans[len++] = '(';
        while(top&gt;0&amp;&amp; pos[s[top]]+l[s[top]] &lt;=len)//表示要匹配栈顶左括号时候若这时候实际长度可能
        {                                          //在匹配范围之内
            if(pos[s[top]]+r[s[top]]&lt;len)      //不在匹配范围之内
            {
                flag = 1;
                break;
            }
            else {
                ans[len++] = ')';  //匹配到，出栈
                s[top--] = 0;
            }

        }

    }
    if(!flag&amp;&amp;top ==0) //top!=0 还有括号没有得到匹配
    {
        puts(ans);
    }
    else
     puts("IMPOSSIBLE");
    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[codeforces 507E]]></title>
    <link href="http://kevin20x2.github.io/blog/2015/04/04/codeforces-507e/"/>
    <updated>2015-04-04T16:51:31+08:00</updated>
    <id>http://kevin20x2.github.io/blog/2015/04/04/codeforces-507e</id>
    <content type="html"><![CDATA[<h3><a href="http://acm.hust.edu.cn/vjudge/problem/visitOriginUrl.action?id=108837">B - Breaking Good</a></h3>

<!--more-->


<h3>Description</h3>

<p>Breaking Good is a new video game which a lot of gamers want to have. There is a certain level in the game that is really difficult even for experienced gamers.</p>

<p>Walter William, the main character of the game, wants to join a gang called Los Hermanos (The Brothers). The gang controls the whole country which consists of n cities with m bidirectional roads connecting them. There is no road is connecting a city to itself and for any two cities there is at most one road between them. The country is connected, in the other words, it is possible to reach any city from any other city using the given roads.</p>

<p>The roads aren&rsquo;t all working. There are some roads which need some more work to be performed to be completely functioning.</p>

<p>The gang is going to rob a bank! The bank is located in city 1. As usual, the hardest part is to escape to their headquarters where the police can&rsquo;t get them. The gang&rsquo;s headquarters is in city n. To gain the gang&rsquo;s trust, Walter is in charge of this operation, so he came up with a smart plan.</p>

<p>First of all the path which they are going to use on their way back from city 1 to their headquarters n must be as short as possible, since it is important to finish operation as fast as possible.</p>

<p>Then, gang has to blow up all other roads in country that don&rsquo;t lay on this path, in order to prevent any police reinforcements. In case of non-working road, they don&rsquo;t have to blow up it as it is already malfunctional.</p>

<p>If the chosen path has some roads that doesn&rsquo;t work they&rsquo;ll have to repair those roads before the operation.</p>

<p>Walter discovered that there was a lot of paths that satisfied the condition of being shortest possible so he decided to choose among them a path that minimizes the total number of affected roads (both roads that have to be blown up and roads to be repaired).</p>

<p>Can you help Walter complete his task and gain the gang&rsquo;s trust?</p>

<h3>Input</h3>

<p>The first line of input contains two integers n, m (2 ≤ n ≤ 105, ), the number of cities and number of roads respectively.</p>

<p>In following m lines there are descriptions of roads. Each description consists of three integers x, y, z (1 ≤ x, y ≤ n, ) meaning that there is a road connecting cities number x and y. If z = 1, this road is working, otherwise it is not.</p>

<h3>Output</h3>

<p>In the first line output one integer k, the minimum possible number of roads affected by gang.</p>

<p>In the following k lines output three integers describing roads that should be affected. Each line should contain three integers x, y, z (1 ≤ x, y ≤ n, ), cities connected by a road and the new state of a road. z = 1 indicates that the road between cities x and y should be repaired and z = 0 means that road should be blown up.</p>

<p>You may output roads in any order. Each affected road should appear exactly once. You may output cities connected by a single road in any order. If you output a road, it&rsquo;s original state should be different from z.</p>

<p>After performing all operations accroding to your plan, there should remain working only roads lying on some certain shortest past between city 1 and n.</p>

<p>If there are multiple optimal answers output any.</p>

<h2>Sample Input</h2>

<h3>Input</h3>

<p>2 1<br/>
1 2 0</p>

<h3>Output</h3>

<p>1<br/>
1 2 1</p>

<h3>Input</h3>

<p>4 4<br/>
1 2 1<br/>
1 3 0<br/>
2 3 1<br/>
3 4 1</p>

<h3>Output</h3>

<p>3<br/>
1 2 0<br/>
1 3 1<br/>
2 3 0</p>

<h3>Input</h3>

<p>8 9<br/>
1 2 0<br/>
8 3 0<br/>
2 3 1<br/>
1 4 1<br/>
8 7 0<br/>
1 5 1<br/>
4 6 1<br/>
5 7 0<br/>
6 8 0</p>

<h3>Output</h3>

<p>3<br/>
2 3 0<br/>
1 5 0<br/>
6 8 1</p>

<p>题意是一个公路网络可以看做无向图，要找到从点1到点n的最短路径，然后其他的路如果是能工作的就要炸掉， 这条最短路上的如果有路不能工作就要修好，然后问总共炸掉和修好的路最少有多少条，并且输出来。</p>

<p>首先单点最短路 用spfa 或者Dijkstra 可以很快的找出来，用两个数组d1和dn分别表示各点到点1和点n的距离<br/>
，那么如果d1[x]+dn[x] == dist （1和n之间的距离）这个点就在最短路上。剩下的就是经典的k段图问题了。用bfs加上dp可以求解。</p>

<pre><code class="cpp">#include&lt;cstdio&gt;
#include&lt;iostream&gt;
#include&lt;cstring&gt;
#include&lt;cmath&gt;
#include&lt;vector&gt;
#include&lt;algorithm&gt;
#include&lt;queue&gt;
#include&lt;map&gt;
typedef  long long LL;

#define clr(x) memset((x),0,sizeof(x))
#define inf 0x3f3f3f3f

using namespace std;
const int maxn = 100050;
int d1[maxn];
int dn[maxn];
bool inque[maxn];
vector &lt;pair &lt;int,int&gt; &gt; v[maxn];
void spfa(int x,int * a)
{
    memset(inque,0,sizeof inque);
    queue &lt;int &gt; q;
    q.push(x);
    inque[x] = true;
    a[x] = 0;
    while(!q.empty())
    {
        int t = q.front();
        q.pop();
        for(int i =0;i&lt;v[t].size();i++) if(a[v[t][i].first]&gt;a[t]+1)
        {
            a[v[t][i].first] = a[t]+1;
            if(!inque[v[t][i].first])
            {
                inque[v[t][i].first] = true;
                q.push(v[t][i].first);
            }

        }
        inque[t] = false;
    }
}
int n,m;
int dp[maxn];
int vis[maxn];
pair &lt;int,int&gt; head[maxn];
vector &lt;pair &lt;pair &lt;int ,int &gt;,int &gt; &gt; edge;
map &lt;pair &lt;int ,int&gt; ,int &gt; mp;

int main()
{
    int x,y,z;
    for(int i = 1;i&lt;=n;i++)
        v[i].clear();
    edge.clear();
    scanf("%d%d",&amp;n,&amp;m);
    int sum=0;
    for(int i = 0;i&lt;m;i++)
    {
        scanf("%d%d%d",&amp;x,&amp;y,&amp;z);
        sum+= z;
        v[x].push_back(make_pair(y,z));
        v[y].push_back(make_pair(x,z));
        edge.push_back(make_pair(make_pair(x,y), z ));
    }
    memset(d1,0x3f,sizeof d1);
    spfa(1,d1);
    memset(dn,0x3f,sizeof dn);
    spfa(n,dn);
    int dist = d1[n];
    memset(dp, 0,sizeof dp);
    memset(vis,0x3f ,sizeof vis);
    queue &lt;int &gt; q;
    q.push(1);
    vis[1] = 0;
    while(!q.empty())
    {
        int t = q.front() ; q.pop();
        for(int i = 0;i&lt;v[t].size();i++) 
        {
            int u = v[t][i].first;
            if(d1[u]+dn[u]==dist&amp;&amp;vis[u]&gt;=vis[t]+1)
            {
                vis[u] = vis[t]+1;
                dp[u] = max(dp[u],dp[t]+v[t][i].second);
                if(dp[u] == dp[t]+v[t][i].second)
                {
                    head[u] = make_pair(t,v[t][i].second);
                }
                q.push(u);
            }

        }
    }

    printf("%d\n",sum+dist-2*dp[n]);
    int t = n;
    int tot = 0;
    mp.clear();
    while(t!=1)
    {
        mp[make_pair(head[t].first,t)] = tot++;
        mp[make_pair(t,head[t].first)] = tot++;
        if(head[t].second==0)
        {
            printf("%d %d 1\n",head[t].first,t);

        }
        t = head[t].first;
    }
    for(int i = 0;i&lt;edge.size();i++) if(mp.find(edge[i].first)==mp.end())
    {
        if(edge[i].second==1)
        printf("%d %d 0\n",edge[i].first.first,edge[i].first.second);
    }

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CF529B]]></title>
    <link href="http://kevin20x2.github.io/blog/2015/03/24/cf529b/"/>
    <updated>2015-03-24T20:39:42+08:00</updated>
    <id>http://kevin20x2.github.io/blog/2015/03/24/cf529b</id>
    <content type="html"><![CDATA[<h2><a href="http://codeforces.com/problemset/problem/529/B">B. Group Photo 2 (online mirror version)</a></h2>

<!--more-->


<p>Many years have passed, and n friends met at a party again. Technologies have leaped forward since the last meeting, cameras with timer appeared and now it is not obligatory for one of the friends to stand with a camera, and, thus, being absent on the photo.</p>

<p>Simply speaking, the process of photographing can be described as follows. Each friend occupies a rectangle of pixels on the photo: the i-th of them in a standing state occupies a wi pixels wide and a hi pixels high rectangle. But also, each person can lie down for the photo, and then he will occupy a hi pixels wide and a wi pixels high rectangle.</p>

<p>The total photo will have size W × H, where W is the total width of all the people rectangles, and H is the maximum of the heights. The friends want to determine what minimum area the group photo can they obtain if no more than n / 2 of them can lie on the ground (it would be strange if more than n / 2 gentlemen lie on the ground together, isn&rsquo;t it?..)</p>

<p>Help them to achieve this goal.</p>

<h3>Input</h3>

<p>The first line contains integer n (1 ≤ n ≤ 1000) — the number of friends.</p>

<p>The next n lines have two integers wi, hi (1 ≤ wi, hi ≤ 1000) each, representing the size of the rectangle, corresponding to the i-th friend.</p>

<h3>Output</h3>

<p>Print a single integer equal to the minimum possible area of the photo containing all friends if no more than n / 2 of them can lie on the ground.</p>

<h3>Sample test(s)</h3>

<h3>input</h3>

<p>3<br/>
10 1<br/>
20 2<br/>
30 3</p>

<h3>output</h3>

<p>180</p>

<h3>input</h3>

<p>3<br/>
3 1<br/>
2 2<br/>
4 3</p>

<h3>output</h3>

<p>21</p>

<h3>input</h3>

<p>1<br/>
5 10</p>

<h3>output</h3>

<p>50</p>

<p>题目大意： n个长方形 ，排成一排 ， 总占面积 为 宽w 的和 高h的最大值 组成的长方形。
即∑w * max(h) 。<br/>
现在可调换不超过 n/2个 长方形的 长和宽<br/>
使得上式取最小值</p>

<p>n只有1000 因此可以枚举 作为 最大的 高h的值 。<br/>
对于每个h 看能否满足条件 ，即其他的高比h小， 并且调换的个数不超过n/2。 <br/>
要求得最小值则需要 w和h调换之后 最高的h不变 而 调换过后的 w比原来的小 。 <br/>
若w-h>0 则此时应该在不超过2/n的基础上尽量调换 <br/>
若 w-h&lt;0 则此时不要调换。<br/>
因此按照 w-h 来排序。</p>

<p>复杂度 n<sup>2</sup></p>

<p>code:
&#8220;`cpp</p>

<h1>include<cstdio></h1>

<h1>include<iostream></h1>

<h1>include<cstring></h1>

<h1>include<cmath></h1>

<h1>include<vector></h1>

<h1>include<algorithm></h1>

<p>typedef  long long LL;</p>

<h1>define clr(x) memset((x),0,sizeof(x))</h1>

<h1>define inf 0x3f3f3f3f</h1>

<p>using namespace std;
struct seg{
    int w,h;
}a[1050];
int cmp(seg a,seg b)
{
    return a.w-a.h>b.w-b.h;
}
int n;
bool vis[1050];
int main()
{
    scanf(&ldquo;%d&rdquo;,&amp;n);
    for(int i =1;i&lt;=n;i++)
    {
        scanf(&ldquo;%d%d&rdquo;,&amp;a[i].w,&amp;a[i].h);
    }
    sort(a+1,a+n+1,cmp);
    int ans = inf;
    for(int i =1;i&lt;=n;i++)
    {
        for(int t= 0;t&lt;2;t++)
        {
            int h;
            int w ;
            memset(vis,0,sizeof vis);
            vis[i] = 1;
            if(t==0)
            {
                h = a[i].h;
                w = a[i].w;
            }
            else {
                h = a[i].w;
                w = a[i].h;
            }
            int count =t;
            bool flag = 0;
            for(int j=1;j&lt;=n;j++) if(j!=i)
            {
                if(a[j].h>h &amp;&amp;a[j].w&lt;=h)
                {
                    vis[j] = 1;
                    w+= a[j].h;
                    count++;
                }
                if(a[j].h>h&amp;&amp;a[j].w>h) {
                    flag = 1;
                    break;
                }
            }
            if(count> n/2) flag = 1;
           // printf(&ldquo;%d \n&rdquo;,count);
            int num = n/2-count;
            if(!flag)
            {
                for(int j = 1;j&lt;=n;j++)
                {
                    if(!vis[j]&amp;&amp;a[j].w&lt;=h&amp;&amp;a[j].w-a[j].h>0&amp;&amp;num>0)  // 尽量调换 w和h的情况 <br/>
                    {
                        w+=a[j].h;
                        num&ndash;;
                    }
                    else if(!vis[j]) w+=a[j].w;
                }
                ans =min(ans,w<em>h);
                //printf(&ldquo;</em>%d\n&rdquo;,w*h);
            }
        }
    }
    printf(&ldquo;%d\n&rdquo;,ans);</p>

<pre><code>return 0;
</code></pre>

<p>}</p>

<p>&#8220;`</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CF527D]]></title>
    <link href="http://kevin20x2.github.io/blog/2015/03/24/cf527d/"/>
    <updated>2015-03-24T17:02:36+08:00</updated>
    <id>http://kevin20x2.github.io/blog/2015/03/24/cf527d</id>
    <content type="html"><![CDATA[<h3><a href="http://codeforces.com/contest/527/problem/D">D. Clique Problem</a></h3>

<!--more-->


<p>The clique problem is one of the most well-known NP-complete problems. Under some simplification it can be formulated as follows. Consider an undirected graph G. It is required to find a subset of vertices C of the maximum size such that any two of them are connected by an edge in graph G. Sounds simple, doesn&rsquo;t it? Nobody yet knows an algorithm that finds a solution to this problem in polynomial time of the size of the graph. However, as with many other NP-complete problems, the clique problem is easier if you consider a specific type of a graph.</p>

<p>Consider n distinct points on a line. Let the i-th point have the coordinate xi and weight wi. Let&rsquo;s form graph G, whose vertices are these points and edges connect exactly the pairs of points (i, j), such that the distance between them is not less than the sum of their weights, or more formally: |xi - xj| ≥ wi + wj.</p>

<p>Find the size of the maximum clique in such graph.</p>

<h3>Input</h3>

<p>The first line contains the integer n (1 ≤ n ≤ 200 000) — the number of points.</p>

<p>Each of the next n lines contains two numbers xi, wi (0 ≤ xi ≤ 109, 1 ≤ wi ≤ 109) — the coordinate and the weight of a point. All xi are different.</p>

<h3>Output</h3>

<p>Print a single number — the number of vertexes in the maximum clique of the given graph.</p>

<h3>Sample test(s)</h3>

<h3>input</h3>

<p>4<br/>
2 3<br/>
3 1<br/>
6 1<br/>
0 2</p>

<h3>output</h3>

<p>3</p>

<p>n个点每个点有两个属性 x和w ，需要找出这样一个点的集合，每两个点满足 |xi - xj| ≥ wi + wj.<br/>
问最大的集合里面有多少个点。<br/>
这个题真是想复杂了。<br/>
本来想着按x 来排序的 ，因为考虑到如果按x+w 来排序会出现 后面的值x x小于前面x的情况。<br/>
后来发现这种情况是不可能出现的<br/>
因为要同时满足下面3个条件的点是不可能出现的</p>

<p>1.xi+wi &lt; xj+wj
2.xi> xj
3.xi-wi > xj+wj<br/>
所以就简单了，按照 x+w排序 然后记录x+w的最大值 能往集合里面插（xj-wj>=maxn）就往里面插<br/>
因为 这次不插下次插的话 再插的 x+w的最大值比这一次要大，后面的结果就有可能变小。<br/>
满足贪心的原理。</p>

<pre><code class="cpp">#include&lt;cstdio&gt;
#include&lt;iostream&gt;
#include&lt;cstring&gt;
#include&lt;cmath&gt;
#include&lt;vector&gt;
#include&lt;algorithm&gt;
#include&lt;queue&gt;
typedef  long long LL;

#define clr(x) memset((x),0,sizeof(x))
#define inf 0x3f3f3f3f

using namespace std;
struct seg{
    int x;
    int w;
    seg(int x,int w):x(x),w(w){};
    seg(){};
    friend bool operator &lt;(seg a,seg b){
        return a.w&lt;b.w;
    };
}a[200050];
int n;
int cmp(seg a,seg b)
{
    return a.w&lt;b.w;
}

int main()
{
    scanf("%d",&amp;n);
    int x,y;
    for(int i= 1;i&lt;=n;i++)
    {
        scanf("%d%d",&amp;x,&amp;y);
        a[i].x = x-y;
        a[i].w = x+y;
    }
    sort(a+1,a+n+1,cmp);
    int t = a[1].x;
    int ans = 0;
    for(int i =1;i&lt;=n;i++)
    {
        if(a[i].x&gt;=t)
        {
            ans ++;
            t = a[i].w;
        }
    }
    printf("%d\n",ans);
    return 0;
}
</code></pre>
]]></content>
  </entry>
  
</feed>
