<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类:  树状dp | ZVINK's garden]]></title>
  <link href="http://kevin20x2.github.io/blog/categories/shu-zhuang-dp/atom.xml" rel="self"/>
  <link href="http://kevin20x2.github.io/"/>
  <updated>2018-01-20T15:44:43+08:00</updated>
  <id>http://kevin20x2.github.io/</id>
  <author>
    <name><![CDATA[ZVINK]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[poj1848]]></title>
    <link href="http://kevin20x2.github.io/blog/2015/05/28/poj1848/"/>
    <updated>2015-05-28T15:53:15+08:00</updated>
    <id>http://kevin20x2.github.io/blog/2015/05/28/poj1848</id>
    <content type="html"><![CDATA[<h3><a href="http://poj.org/problem?id=1848">Tree</a></h3>

<!--more-->


<p>题意是给你一颗树加最少的边使得每一个节点刚好在一个环上。
如果不能做到就输出-1.</p>

<p>很明显的树状dp ，然而也有不少坑。
首先题意中的意思就是不能有重边，也就是这个环必须得是3个或3个以上的点组成的。</p>

<p>如果用dp[x][0]表示当前节点还没有成环的状态，
dp[x][1]表示当前节点已经在环中。<br/>
不考虑其父节点，那么对于dp[x][0]分两种情况，一种是他的所有子节点已经在环中，另外一种是他有一个没有成环的子节点与它相连。</p>

<p>对于dp[x][1]<br/>
可以在其子节点中找1个或者两个没有成环的点加一条边形成环。</p>

<p>然而这样做没有考虑到重边的情况。。</p>

<p>连边的时候如果只找了一个没有成环的节点，那么此时有可能这个节点就是没有成环的端点，即其子节点全部都已经在环中，这个时候连边的话就相当于重边了。</p>

<p>所以我们还需要加一个特殊的状态表示当前没有成环，且该节点的子节点全部在环中的特殊状态。即端点。</p>

<p>写的太挫，感觉应该有更好的方法 <em>(:з」∠)</em></p>

<pre><code class="cpp">
/*
 *File:  1848.cpp
 *Date : 2015-05-21 22:28:22
 */
#include&lt;cstdio&gt;
#include&lt;iostream&gt;
#include&lt;cstring&gt;
#include&lt;cmath&gt;
#include&lt;vector&gt;
#include&lt;algorithm&gt;
typedef  long long LL;

#define clr(x) memset((x),0,sizeof(x))
#define inf 0x3f3f3f3f

using namespace std;
LL dp[110][3];
vector &lt;int&gt; v[110];
int n;
LL dfs(int x,int l,int fa)
{
    if(dp[x][l]!=-1) return dp[x][l];
    LL ans = inf;
    int t = v[x].size();
    if(t == 1&amp;&amp;v[x][0] == fa) 
    {
        if(l ==2)
        return dp[x][l] = 0;
        else return dp[x][l] = inf;
    }
    if(l == 1)
    {

        int len = v[x].size();
        LL tmp = 0;
        for(int i = 0 ;i&lt;len;i++) if(v[x][i]!=fa)
        {
            tmp = dfs(v[x][i],0,x);
            for(int j = 0;j&lt;len;j++) if(j!=i&amp;&amp;v[x][j]!=fa)
            {
                tmp += dfs(v[x][j],1,x);
            }
        }
        ans = min(ans,tmp+1);
        for(int i =0;i&lt;len;i++) if(v[x][i]!=fa)
        {
            for(int j = 0;j&lt;len;j++) if(i!=j&amp;&amp;v[x][j]!=fa)
            {
                LL tmp = 0;
                for(int t = 0;t&lt;len;t++) if(t!=i&amp;&amp;t!=j&amp;&amp;v[x][t]!=fa)
                {
                    tmp += dfs(v[x][t],1,x);
                }
                ans = min(ans,tmp+dfs(v[x][i],0,x)+dfs(v[x][j],0,x)+1);
                ans = min(ans,tmp+dfs(v[x][i],2,x)+dfs(v[x][j],0,x)+1);
                ans = min(ans,tmp+dfs(v[x][i],2,x)+dfs(v[x][j],2,x)+1);
            }

        }
      //  printf("%d %d %d\n",x,l,ans);
        return dp[x][l] = ans;
    }
    else if(l == 0)
    {
        LL tt;
       for(int i = 0;i&lt;v[x].size();i++)  if(v[x][i]!=fa)
       {
           tt = min(dfs(v[x][i],0,x),dfs(v[x][i],2,x));
           for(int j = 0;j&lt;v[x].size();j++) if(i!=j&amp;&amp;v[x][j]!=fa)
           {
               tt+= dfs(v[x][j],1,x);
           }
           ans = min(ans,tt);
       }
    // printf("%d %d %d\n",x,l,ans);
       return dp[x][l] = ans;
    }
    else if(l==2)
    {
        LL tmp = 0;
        for(int i =0;i&lt;v[x].size();i++) if(v[x][i]!=fa)
        {
            tmp += dfs(v[x][i],1,x);
        }
        ans = min(ans,tmp);
    // printf("%d %d %d\n",x,l,ans);
        return dp[x][l] =ans;
    }
}
int main()
{
    while(~scanf("%d",&amp;n))
    {
        int x,y;
        memset(dp,-1,sizeof dp);
        for(int i= 1;i&lt;=n;i++)
            v[i].clear();
        for(int i = 1;i&lt;n;i++)
        {
            scanf("%d%d",&amp;x,&amp;y);
            v[x].push_back(y);
            v[y].push_back(x);
        }
        LL ans = dfs(1,1,0) ;
        if(ans &gt;= inf)
            ans = -1;
        printf("%lld\n", ans);
    }
    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[poj1947]]></title>
    <link href="http://kevin20x2.github.io/blog/2015/05/28/poj1947/"/>
    <updated>2015-05-28T15:17:15+08:00</updated>
    <id>http://kevin20x2.github.io/blog/2015/05/28/poj1947</id>
    <content type="html"><![CDATA[<h2><a href="http://poj.org/problem?id=1947">Rebuilding Roads</a></h2>

<!--more-->


<p>题意是给你一颗树你可以通过切掉数的若干条边，然后要得到一个节点数为p的子树。问你最少切掉多少条边。</p>

<p>首先当然是将无根树变成有根树，然后如果某个子树的大小刚好等于P的话这样最少就切一次。特殊情况是n=p，这时输出0。</p>

<p>其他情况就要进行dp了。
最容易想到的状态就是dp[i][j] 表示以节点i为根的子树变成j个节点需要切掉的最小边数。</p>

<p>然而状态转移方程不好写。因为每个节点有若干个子节点，你需要保证所有子节点的和刚好等于j，这就涉及到分配的问题，尝试的交了一次，TLE。</p>

<p>后来看别人代码才知道这里可以对节点i的所有子节点进行一次01 背包。
先回顾一下01 背包：</p>

<h3>dp[i][j] = min(dp[i-1][j],dp[i-1][j-v[i]]+w[i]);</h3>

<p>是枚举当前的物品取或者不取的状态。
这里也是枚举当前的边删或者不删。
方程为</p>

<h3>dp[i][x][m] = min(dp[i-1][x][m]+1,dp[i-1][x][m-k]+dp[last][son][k];</h3>

<p>这里用3维方便理解，i表示现在在第i个子节点，last表示当前子节点对应状态的最后的值。
考虑到单调性将i去掉，得</p>

<h3>dp[x][m] = min(dp[x][m]+1,dp[x][m-k]+dp[son][k]);</h3>

<p>由于是树状dp 因此在算当前节点的时候，所有子节点的状态结果已经算出来。</p>

<p>现在的问题就是怎么初始化。</p>

<p>想想01背包的最初的状态为最开始什么都没装dp[0][0] = 0;</p>

<p>这里还没枚举第一个子节点时，也需要将根算进去，因此初始化 dp[x][1] = 0;</p>

<p>听说还有一种将数转化成2叉树的优化方法，有时间补上。</p>

<p>真是弱的不能看啊orz</p>

<pre><code class="cpp">#include&lt;cstdio&gt;
#include&lt;iostream&gt;
#include&lt;cstring&gt;
#include&lt;cmath&gt;
#include&lt;vector&gt;
#include&lt;algorithm&gt;
typedef  long long LL;

#define clr(x) memset((x),0,sizeof(x))
#define inf 0x3f3f3f3f

using namespace std;
const int maxn = 161;
vector &lt;int&gt; v[maxn];
int dp[maxn][maxn];
int num[maxn];
int n,m;
void dfs2(int x,int fa)
{
    for(int i = 0;i&lt;v[x].size();i++) if(v[x][i]!=fa)
    {
        dfs2(v[x][i],x);
        num[x] += num[v[x][i]];
    }
    ++num[x] ;
}
void dfs(int x,int fa)
{
    if(num[x]==1)
    {
        dp[x][1] = 0;
        return ;
    }
    dp[x][1] = 0;
    for(int i = 0;i&lt;v[x].size();i++)if(v[x][i]!=fa){
        dfs(v[x][i],x);
        for(int j = num[x];j&gt;=0;j--){
            int tt = min(num[v[x][i]],j);
            dp[x][j]+=1;
            for(int k = 1;k&lt;=tt;k++)
            {
                dp[x][j] = min(dp[x][j],dp[v[x][i]][k]+dp[x][j-k]);
            }
            //printf("%d %d %d\n",x,j,dp[x][j]);
        }
    }
}

int main()
{
    scanf("%d%d",&amp;n,&amp;m);
    int x ,y;
    memset(dp,0x3f,sizeof dp);
    memset(num,0,sizeof num);
    for(int i = 1;i&lt;n;i++)
    {
        scanf("%d%d",&amp;x,&amp;y);
        v[x].push_back(y);
        v[y].push_back(x);
    }
    int ans =inf;
    dfs2(1,0);
    dfs(1,0);
    for(int i = 2;i&lt;=n;i++)
    {
        if(num[i]==m){
            puts("1");
            return 0;
        }
    }
    ans = dp[1][m];
    printf("%d\n",ans);
    return 0;
}
</code></pre>
]]></content>
  </entry>
  
</feed>
