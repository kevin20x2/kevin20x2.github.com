<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类:  topsort | ZVINK's garden]]></title>
  <link href="http://kevin20x2.github.io/blog/categories/topsort/atom.xml" rel="self"/>
  <link href="http://kevin20x2.github.io/"/>
  <updated>2018-01-20T15:44:43+08:00</updated>
  <id>http://kevin20x2.github.io/</id>
  <author>
    <name><![CDATA[ZVINK]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[hdu4857]]></title>
    <link href="http://kevin20x2.github.io/blog/2015/03/31/hdu4857/"/>
    <updated>2015-03-31T21:30:22+08:00</updated>
    <id>http://kevin20x2.github.io/blog/2015/03/31/hdu4857</id>
    <content type="html"><![CDATA[<!--more-->


<h2><a href="http://acm.hdu.edu.cn/showproblem.php?pid=4857">逃生</a></h2>

<h3>Problem Description</h3>

<p>糟糕的事情发生啦，现在大家都忙着逃命。但是逃命的通道很窄，大家只能排成一行。</p>

<p>现在有n个人，从1标号到n。同时有一些奇怪的约束条件，每个都形如：a必须在b之前。
同时，社会是不平等的，这些人有的穷有的富。1号最富，2号第二富，以此类推。有钱人就贿赂负责人，所以他们有一些好处。</p>

<p>负责人现在可以安排大家排队的顺序，由于收了好处，所以他要让1号尽量靠前，如果此时还有多种情况，就再让2号尽量靠前，如果还有多种情况，就让3号尽量靠前，以此类推。</p>

<p>那么你就要安排大家的顺序。我们保证一定有解。</p>

<h3>Input</h3>

<p>第一行一个整数T(1 &lt;= T &lt;= 5),表示测试数据的个数。
然后对于每个测试数据，第一行有两个整数n(1 &lt;= n &lt;= 30000)和m(1 &lt;= m &lt;= 100000)，分别表示人数和约束的个数。</p>

<p>然后m行，每行两个整数a和b，表示有一个约束a号必须在b号之前。a和b必然不同。</p>

<h3>Output</h3>

<p>对每个测试数据，输出一行排队的顺序，用空格隔开。</p>

<h3>Sample Input</h3>

<p>1<br/>
5 10<br/>
3 5<br/>
1 4<br/>
2 5<br/>
1 2<br/>
3 4<br/>
1 4<br/>
2 3<br/>
1 5<br/>
3 5<br/>
1 2</p>

<h3>Sample Output</h3>

<p>1 2 3 4 5</p>

<h4>Author</h4>

<p>CLJ</p>

<h4>Source</h4>

<p>BestCoder Round #1</p>

<p>拓扑排序加优先队列 ， 放在hdu上的测试 丧心病狂的卡了时间 用输入挂解决，再就是题目中要求编号小的尽量放前面，因此是逆序建图，然后优先队列先处理大的。</p>

<pre><code class="cpp">#include&lt;cstdio&gt;
#include&lt;cstring&gt;
#include&lt;cmath&gt;
#include&lt;iostream&gt;
#include&lt;algorithm&gt;
#include&lt;vector&gt;
#include&lt;queue&gt;
const int maxn=30010;
using namespace std;

vector&lt;int&gt; e[maxn];
int n,m,in[maxn],ans[maxn],cnt;

struct cmp
{
  bool operator ()(int &amp;a,int &amp;b){
    return a&lt;b;//最大值优先
  }
};
void read2(int &amp;x)
{
    char c;
    bool neg = false;
    while(((c=getchar())&lt;'0'||c&gt;'9')&amp;&amp;c!='-');
    if(c=='-')
    {
        neg = true;
        while((c=getchar())&lt;'0'||c&gt;'9');
    }
    x= c-'0';
    while(c=getchar(),c&gt;='0'&amp;&amp;c&lt;='9') x= x*10+c-'0';
    if(neg) x=-x;
}

void topo()
{
  priority_queue&lt;int,vector&lt;int&gt;,cmp&gt; q;
  for(int i=1;i&lt;=n;i++)
    if(in[i]==0) q.push(i);
  int flag=0;
  int x,i;
  while(!q.empty())
  {
    x=q.top();
    q.pop();
    ans[++cnt]=x;
    for(i=0;i&lt;e[x].size();i++)
    {
      in[e[x][i]]--;
      if(in[e[x][i]]==0)
        q.push(e[x][i]);
    }
  }
}

int main()
{
  int t,a,b,i;
  scanf("%d",&amp;t);
  while(t--)
  {
    scanf("%d%d",&amp;n,&amp;m);
    for(i=0;i&lt;=n;i++)
      e[i].clear();
    memset(in,0,sizeof in);
    while(m--)
    {
      read2(a);read2(b);
      e[b].push_back(a);
      in[a]++;
    }
    cnt=0;
    topo();
    printf("%d",ans[cnt]);
    for(i=cnt-1;i&gt;0;i--)
      printf(" %d",ans[i]);
    puts("");
  }
  return 0;
}
</code></pre>
]]></content>
  </entry>
  
</feed>
