<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类:  区间dp | ZVINK's garden]]></title>
  <link href="http://kevin20x2.github.io/blog/categories/qu-jian-dp/atom.xml" rel="self"/>
  <link href="http://kevin20x2.github.io/"/>
  <updated>2018-01-20T15:44:43+08:00</updated>
  <id>http://kevin20x2.github.io/</id>
  <author>
    <name><![CDATA[ZVINK]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[poj1141]]></title>
    <link href="http://kevin20x2.github.io/blog/2015/05/28/poj1141/"/>
    <updated>2015-05-28T15:43:37+08:00</updated>
    <id>http://kevin20x2.github.io/blog/2015/05/28/poj1141</id>
    <content type="html"><![CDATA[<h3><a href="http://poj.org/problem?id=1141">Brackets Sequence</a></h3>

<!--more-->


<p>题意是给你一个括号序列， 让你添加最少的括号 使得，整个序列变成合法的，(每个括号有对应的匹配的且不存在交叉状况。)</p>

<p>基本上能想到这个是区间dp能写出方程来就没什么问题</p>

<p>dp[i][j] = dp[i+1][j-1]+1 when i 匹配 j<br/>
or<br/>
dp[i][j] = dp[i][k]+dp[k+1][j]</p>

<p>比较麻烦的就是需要记录路径，这个我做法是记录下来每次状态的转移的情况，然后再重新标记一下，没有被标记的地方就需要补全了。<br/>
写的仍然这么丑orz</p>

<pre><code class="cpp">
#include&lt;cstdio&gt;
#include&lt;iostream&gt;
#include&lt;cstring&gt;
#include&lt;cmath&gt;
#include&lt;vector&gt;
#include&lt;algorithm&gt;
typedef  long long LL;

#define clr(x) memset((x),0,sizeof(x))
#define inf 0x3f3f3f3f

using namespace std;
char str[1000];
int dp[110][110];
int head[110][110];
bool vis[110];
bool ok(int i,int j)
{
    if((str[i]==')'&amp;&amp;str[j]=='(')||(str[i]==']'&amp;&amp;str[j] =='['))
        return true;
    return false;
}
int dfs(int l,int r)
{
    if(r&lt;=l) return dp[l][r] = 0;
    if(dp[l][r]!=-1) return dp[l][r];
    int ans = 0;
    if(ok(r,l))  
    {
        ans = max(ans,dfs(l+1,r-1)+1);
        head[l][r] = -1;
    }

    for(int i =l;i&lt;r;i++)
    {
        ans = max(ans,dfs(l,i)+dfs(i+1,r));
        if(ans == dfs(l,i)+dfs(i+1,r))
        {
            head[l][r] = i;
        }

    }
    //printf(" %d %d %d %d\n",l,r,head[l][r],ans);
    return dp[l][r] = ans;
}
void mark(int l,int r)
{
    if(r&lt;=l) return ;
    if(head[l][r] ==-1) { 
        vis[l] = vis[r] = 1;
       // printf("%d %d\n",l,r);
        mark(l+1,r-1);
        return ;
    }
    int t = head[l][r];
    mark(l,t);
    mark(t+1,r);
}

int main()
{
    scanf("%s",str);
    {
        memset(dp,-1,sizeof dp);
        memset(vis,0,sizeof vis);
        memset(head,0,sizeof head);
        int len = strlen(str);
        int ans = dfs(0,len-1);
        mark(0,len-1);
      //  printf("%d\n",ans);
        for(int i =0;i&lt;len;i++)
        {
            if(vis[i]) putchar(str[i]);
            else {
                if(str[i]=='('||str[i]==')')
                {
                    printf("()");
                }
                else{
                    printf("[]");
                }
            }
        }
        putchar('\n');
    }
    return 0;
}
</code></pre>
]]></content>
  </entry>
  
</feed>
